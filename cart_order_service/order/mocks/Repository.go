// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"
	order "swa-semestral-project/cart_order_service/order"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ChangeOrderStatus provides a mock function with given fields: ctx, id, status
func (_m *Repository) ChangeOrderStatus(ctx context.Context, id string, status string) error {
	ret := _m.Called(ctx, id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, _a1
func (_m *Repository) CreateOrder(ctx context.Context, _a1 order.Order) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, order.Order) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, order.Order) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetOrderByID(ctx context.Context, id string) (order.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 order.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) order.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(order.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByCustomerID provides a mock function with given fields: ctx, id
func (_m *Repository) GetOrdersByCustomerID(ctx context.Context, id string) ([]order.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 []order.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) []order.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
