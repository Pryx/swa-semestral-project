openapi: "3.0.0"
info:
  version: 1.0.0
  title: Auth microservice
paths:
  /users/{userId}:
    get:
      summary: Request info for a specific user
      operationId: showUserById
      tags:
        - User info
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Info about requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<User>"
        '404':
          description: User not found    
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<User>"
              example:
                message: "User not found!"
                success: false
                data: ""
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<User>"
              example:
                message: "Internal server error!"
                success: false
                data: ""
  /register/:
    post:
      summary: Register user
      operationId: registerUser
      tags:
        - User modification
      requestBody:
       content:
         application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<User>"
              example:
                success: true
                message: "Successfully registered user"
                data: 
                  id: 521
                  firstname: "Franta"
                  lastname: "Novák"
                  email: "user@example.com"
                
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<User>"
              example:
                message: "User already exists!"
                success: false
                data: ""
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<User>"
              example:
                message: "Internal server error!"
                success: false
                data: ""


  /login/:
      post:
        summary: Login the user
        operationId: login
        tags:
          - Auth
        requestBody:
         content:
           application/json:
              schema:
                $ref: "#/components/schemas/LoginRequest"
        responses:
          '200':
            description: Successfully logged in
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<String>"
                example:
                  message: "Successfully logged in!"
                  success: false
                  data: '754d96b6b1efb6b3bf9eddabd61ce480b33e6c4ca8a6db940ce03c480b90af44'
                
          '400':
            description: Invalid request
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<String>"
                example:
                  message: "User not found!"
                  success: false
                  data: false
            
          '401':
            description: Wrong credentials
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<String>"
                example:
                  message: "Wrong credentials!"
                  success: false
                  data: ""
            
          '500':
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<String>"
                example:
                  message: "Internal server error!"
                  success: false
                  data: ""
                
  /logged_in/:
    post:
      summary: Is token valid?
      operationId: registerUser
      tags:
        - Auth
      requestBody:
       content:
         application/json:
            schema:
              $ref: "#/components/schemas/TokenInfo"
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<Bool>"
        '401':
          description: Token is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<Bool>"
              example:
                message: "Unauthorized!"
                success: false
                data: ""
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<Bool>"
              example:
                message: "User not found!"
                success: false
                data: false
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response<Bool>"
              example:
                message: "Internal server error!"
                success: false
                data: ""

  /update/:
    post:
      summary: Update user info
      operationId: updateUser
      tags:
        - User modification
      requestBody:
       content:
         application/json:
            schema:
              $ref: "#/components/schemas/UpdateRequest"
      responses:
          '200':
            description: Successfully updated user
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<User>"
                
          '400':
            description: Invalid request
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<User>"
                example:
                  message: "User not found!"
                  success: false
                  data: false
            
          '401':
            description: Wrong credentials
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<User>"
                example:
                  message: "Wrong credentials!"
                  success: false
                  data: ""
            
          '500':
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<User>"
                example:
                  message: "Internal server error!"
                  success: false
                  data: ""

  /logout/:
      post:
        summary: Logout the user identified by token
        operationId: logout
        tags:
          - Auth
        requestBody:
         content:
           application/json:
              schema:
                $ref: "#/components/schemas/TokenInfo"
        responses:
          '200':
            description: Successfully logged out
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<Bool>"
                example:
                  message: "OK"
                  success: true
                  data: true

          '400':
            description: Invalid request
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<Bool>"
                example:
                  message: "Token not found!"
                  success: true
                  data: false
          '500':
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Response<Bool>"
                example:
                  message: "Internal server error!"
                  success: false
                  data: ""
                
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: "User ID"
          example: 521
        firstname:
          type: string
          description: "User first name"
          example: "Franta"
        lastname:
          type: string
          description: "User last name"
          example: "Novák"
        email:
          description: "User email"
          example: "user@example.com"
          type: string
          
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          description: "User email"
          example: "user@example.com"
          type: string
        password:
          description: "The password"
          example: "12345"
          type: string
          
    TokenInfo:
      type: object
      required:
        - email
        - token
      properties:
        email:
          description: "User email"
          example: "user@example.com"
          type: string
        token:
          type: string
          description: "User token"
          example: "754d96b6b1efb6b3bf9eddabd61ce480b33e6c4ca8a6db940ce03c480b90af44"
          
    RegisterRequest:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
      properties:
        firstname:
          type: string
          description: "User first name"
          example: "Franta"
        lastname:
          type: string
          description: "User last name"
          example: "Novák"
        email:
          description: "User email"
          example: "user@example.com"
          type: string
        password:
          description: "The password"
          example: "12345"
          type: string
          
    Response<User>:
      type: object
      required:
        - message
        - success
      properties:
        message:
          description: "Message from server"
          type: string
          example: "User found!"
        success:
          description: "Whether request was successfull"
          type: boolean
          example: true
        data:
          description: "Retreived user"
          $ref: "#/components/schemas/User"

    Response<String>:
      type: object
      required:
        - message
        - success
      properties:
        message:
          description: "Message from server"
          type: string
        success:
          description: "Whether request was successfull"
          type: boolean
          example: true
        data:
          description: "Retreived data"
          example: "754d96b6b1efb6b3bf9eddabd61ce480b33e6c4ca8a6db940ce03c480b90af44"
          type: string

    Response<Bool>:
      type: object
      required:
        - message
        - success
      properties:
        message:
          description: "Message from server"
          type: string
          example: "User is logged in"
        success:
          description: "Whether request was successfull"
          type: boolean
          example: true
        data:
          description: "Retreived data"
          type: boolean
          example: true
          
    UpdateRequest:
      type: object
      required:
        - email
        - token
        - user_data
      properties:
        message:
          description: "Email"
          type: string
          example: "test@example.com"
        token:
          description: "Token"
          type: string
          example: "754d96b6b1efb6b3bf9eddabd61ce480b33e6c4ca8a6db940ce03c480b90af44"
        user_data:
          description: "User data"
          $ref: "#/components/schemas/RegisterRequest"

